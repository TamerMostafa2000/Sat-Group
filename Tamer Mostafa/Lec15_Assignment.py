# -*- coding: utf-8 -*-
"""Black_friday.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MISRYVoiwXrDIVEU57-MDIl8Ch3bDzvl
"""

import pandas as pd
import numpy as np
import seaborn as sns



"""#1) Using black_friday.csv and apply what you learned in data preprocessing lectures."""

df=pd.read_csv('/content/black_friday.csv')
df

df.info()

df.isnull().sum()

df['Product_Category_2'].value_counts()

df['Product_Category_3'].value_counts()

df['Product_Category_2'].mean()

df['Product_Category_2'].mode()

df['Product_Category_3'].mean()

df['Product_Category_3'].mode()

df['Product_Category_2'].fillna(df['Product_Category_2'].mean(),inplace=True)
df['Product_Category_3'].fillna(df['Product_Category_3'].mean(),inplace=True)
df.isnull().sum()

df

df['Age'].unique()

sns.countplot(x=df['Age'])

df=pd.get_dummies(df,columns=['Age'],drop_first=False)
df

df['City_Category'].unique()

city_Cat_dict={'A':1,'B':2,'C':3,}

df['City_Category']=df['City_Category'].map(city_Cat_dict)
df

df['Stay_In_Current_City_Years'].unique()

df=pd.get_dummies(df,columns=['Stay_In_Current_City_Years'],drop_first=True)
df

df.info()

df['Marital_Status'].value_counts()

df['Purchase'].describe()

df['Occupation'].unique()

y=df['Purchase']

x=df.drop('Purchase',axis=1)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

y_train

y_test



"""#Using loan_data.csv and apply what you learned in data preprocessing lectures."""

df=pd.read_csv('/content/loan_data.csv')
df

df.describe()

df.info()

df.isnull().sum()

df['purpose'].value_counts()

sns.countplot(x=df['purpose'],data=df)

df=pd.get_dummies(df,columns=['purpose'],drop_first=False)
df

df.describe()

x=df.drop('revol.bal',axis=1)
y=df['revol.bal']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)
x_train

y_train.value_counts()*100/len(y_train)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)
x_train

#@title